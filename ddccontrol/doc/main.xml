<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN" "http://docbook.org/xml/4.3/docbookx.dtd" []>
 
<book>
 
<bookinfo>
<title>DDCcontrol Documentation</title>
<author>
<firstname>Nicolas</firstname>
<surname>Boichat</surname>
<email>nicolas@boichat.ch</email>
</author>

<copyright><year>2005</year>
<holder>Nicolas Boichat</holder>
</copyright>

<releaseinfo role="meta">
$Id$
</releaseinfo> 

</bookinfo>

<chapter id="about">
<title>About DDCcontrol</title>

<sect1 id="ddccontrol">
<title>About DDCcontrol</title>
<para>DDCcontrol is a tool used to control monitor parameters, like brightness and contrast,
without using the OSD (On Screen Display) and the buttons in front of the monitor.</para>
<para>There is two version of this tool, a command line version, and a user-friendly
Gnome GUI.</para>
</sect1>
 
<sect1 id="ddcci">
<title>DDC/CI</title>
<para>DDC/CI is a protocol designed by VESA to configure monitor by software,
using two wires on the VGA or DVI cables, which forms an I2C bus.</para>
</sect1>

</chapter>

<chapter id="install">
<title>Install notes</title>

<sect1 id="requirement">
<title>Software Requirement</title>
<para>To compile and run DDCcontrol, you need to install these packages:</para>
<itemizedlist mark='bullet'>
<listitem>
<para>
<ulink url="http://www.xmlsoft.org/">libxml2</ulink>
</para>
</listitem>
<listitem>
<para>
<ulink url="http://atrey.karlin.mff.cuni.cz/~mj/pciutils.shtml">pci-utils</ulink>
</para>
</listitem>
<listitem>
<para>
<ulink url="http://www.gtk.org/">gtk+&gt;=2.4</ulink>
</para>
</listitem>
</itemizedlist>
<note>
<para>
You don't need pci-utils if you don't use direct PCI memory access, and you don't need gtk+ if you don't plan to use the Gnome GUI.
Usually, this is not the case, so you will need these packages.
</para>
</note>
</sect1>

<sect1 id="download">
<title>Download the sources</title>
<para>Go to the <ulink url="http://sourceforge.net/project/showfiles.php?group_id=117933">download section</ulink>
of ddccontrol project's page and download the latest
ddccontrol and ddccontrol-db source tarballs.</para>
<para>Then unpack these two archives with these commands:</para>
<screen format="linespecific">
# tar xvfz ddccontrol-0.1.tar.gz
# tar xvfz ddccontrol-db-0.1.tar.gz
</screen>
<para>You should now have two directories, ddccontrol and ddccontrol-db.</para>
</sect1>
 
<sect1 id="compile">
<title>Compile and install</title>
<para>To compile and install the source tarballs, type:</para>
<screen format="linespecific">
# ./configure
# make
# su root
Password: <userinput>&lt;root password&gt;</userinput>
# make install
</screen>
<para>You need to do this in ddccontrol <emphasis>and</emphasis> ddccontrol-db directories.</para>
<para>If you set the --prefix parameter when configuring the first package, you must set it to the
same value when configuring the second.</para>
</sect1>

<sect1 id="kerneli2c">
<title>Configure /dev/i2c-* devices</title>
<note>/dev/i2c-* devices are only working with kernel 2.6 or greater.</note>
<para>If your graphics card is supported by /dev/i2c-* devices (see (***list***)), you must load the i2c-dev module by typing, as root:</para>
<screen format="linespecific">
# modprobe i2c-dev
</screen>
<para>You must also load your graphics card framebuffer driver (for card-specific instructions see in (***list***)).</para>
<para>If you want to load these modules automatically when Linux starts, see your distrubution's documentation.</para>
<para>To allow standard (non-root) users to use ddccontrol, you must change the permissions on /dev/i2c-*. This is done by typing, as root:</para>
<screen format="linespecific">
# chmod a+rw /dev/i2c-*
</screen>
<sect2>
<title>Kernel configuration options</title>
<para>If i2c-dev or your graphics card's framebuffer modules are not available with your kernel, 
you can build your own kernel with the following options turned on (with recommend to build them
as modules):</para>
<itemizedlist mark='bullet'>
<listitem>
Devices drivers-&gt;I2C support-&gt;I2C support.
</listitem>
<listitem>
Devices drivers-&gt;I2C support-&gt;I2C device interface.
</listitem>
<listitem>
Devices drivers-&gt;Graphics support-&gt;Framebuffer support.
</listitem>
<listitem>
and a specific driver for your graphic card (see (***list***)).
</listitem>
</itemizedlist>
</sect2>
</sect1>
</chapter>

<appendix id="supportedmonitors">
<title>Supported monitors</title>
<para>The following monitors are supported by DDCcontrol:</para>
<sect3>
<title>Mitsubishi</title>
<itemizedlist mark='bullet'>
<listitem>
Diamond Pro 2060u (VGA1 input only (***verify***))
</listitem>
</itemizedlist>
</sect3>
<sect3>
<title>NEC</title>
<itemizedlist mark='bullet'>
<listitem>
Multisync 2080UX+ (VGA and DVI inputs)
</listitem>
</itemizedlist>
</sect3>
<sect3>
<title>Samsung</title>
<itemizedlist mark='bullet'>
<listitem>
SyncMaster 173P (VGA and DVI inputs)
</listitem>
<listitem>
SyncMaster 173T
</listitem>
<listitem>
SyncMaster 193P (VGA and DVI inputs)
</listitem>
</itemizedlist>
</sect3>
</appendix>



<appendix id="supportedgc">
<title>Supported graphics cards</title>
<note>
<para>To control a monitor, DDCcontrol must access to the I2C bus of the graphics card.
They are two methods to do so: the first one uses /dev/i2c-* devices provided by
kernel drivers (abbreviated by dev in tables), the second one reads and writes directly on the 
card PCI memory (abbreviated by PCI in tables).</para>
<para>Depending on your hardware, one method or the other works, or even both.</para>
</note>
<sect1>
<title>ATI</title>
<sect2>
<title>Radeon series</title>
<para>ATI Radeon cards only work with /dev/i2c-* devices. To use them, you must load the radeonfb module by typing, as root:</para>
<screen format="linespecific">
# modprobe radeonfb
</screen>
<para>The kernel configuration options needed to enable Radeon framebuffer and I2C support are:</para>
<itemizedlist mark='bullet'>
<listitem>
Devices drivers-&gt;Graphics support-&gt;Framebuffer support-&gt;ATI Radeon display support
</listitem>
<listitem>
Devices drivers-&gt;Graphics support-&gt;Framebuffer support-&gt;ATI Radeon display support-&gt;DDC/I2C for ATI Radeon support
</listitem>
</itemizedlist>
</sect2>
<sect3>
<title>ATI cards support table</title>
<informaltable frame="all">
<tgroup cols='3'>
<colspec colname='name' align="left"/>
<colspec colname='i2c' align="center"/>
<colspec colname='pci' align="center"/>
<thead>
<row>
  <entry morerows='1' valign='middle'>Name</entry>
  <entry namest="i2c" nameend="pci" align="center">Works</entry>
</row>
<row>
  <entry>dev</entry>
  <entry>PCI</entry>
</row>
</thead>
<tbody>
<row>
  <entry>Radeon 7500</entry>
  <entry>Yes</entry>
  <entry>No</entry>
</row>
<row>
  <entry>Radeon 9200</entry>
  <entry>Yes</entry>
  <entry>No</entry>
</row>
<row>
  <entry>Radeon 9500</entry>
  <entry>Yes</entry>
  <entry>No</entry>
</row>
<row>
  <entry>Radeon 9550 SE</entry>
  <entry>Yes</entry>
  <entry>No</entry>
</row>
<row>
  <entry>Radeon 9600 Pro</entry>
  <entry>Yes</entry>
  <entry>No</entry>
</row>
<row>
  <entry>Radeon 9700</entry>
  <entry>Yes</entry>
  <entry>No</entry>
</row>
</tbody>
</tgroup>
</informaltable>
</sect3>
</sect1>

<sect1>
<title>nVidia</title>
<sect2>
<title>Direct PCI memory access support</title>
<para>Almost every nVidia cards works with direct PCI memory access, and it is compatible with the nVidia proprietary drivers.</para>
<para>To use it, you have nothing special to do, everything is done by DDCcontrol.</para>
</sect2>
<sect2>
<title>/dev/i2c-* devices support</title>
<note>To use /dev/i2c-* devices with nVidia cards, you must have a rather recent kernel (at least version 2.6.9).</note>
<para>Most nVidia cards, starting with TNT, but excluding the most recent GeForce FX serie, work with /dev/i2c-* devices. 
To use them, you must load the rivafb module by typing, as root:</para>
<screen format="linespecific">
# modprobe rivafb
</screen>
<para>The kernel configuration options needed to enable nVidia framebuffer and I2C support are:</para>
<itemizedlist mark='bullet'>
<listitem>
Devices drivers-&gt;Graphics support-&gt;Framebuffer support-&gt;nVidia Riva support
</listitem>
<listitem>
Devices drivers-&gt;Graphics support-&gt;Framebuffer support-&gt;nVidia Riva support-&gt;Enable DDC Support
</listitem>
</itemizedlist>
<warning>
<para>The rivafb kernel module is <emphasis>not</emphasis> compatible with the binary nVidia X drivers,
which are the only drivers for nVidia cards to provide 3D acceleration.</para>
<para>This is why we recommend that you use direct PCI memory access with nVidia cards.</para>
</warning>
</sect2>
<sect3>
<title>nVidia cards support table</title>
<informaltable frame="all">
<tgroup cols='3'>
<colspec colname='name' align="left"/>
<colspec colname='i2c' align="center"/>
<colspec colname='pci' align="center"/>
<thead>
<row>
  <entry morerows='1' valign='middle'>Name</entry>
  <entry namest="i2c" nameend="pci" align="center">Works</entry>
</row>
<row>
  <entry>dev</entry>
  <entry>PCI</entry>
</row>
</thead>
<tbody>
<row>
  <entry>GeForce Ti 200</entry>
  <entry>Yes</entry>
  <entry>Yes</entry>
</row>
<row>
  <entry>GeForce FX 5700</entry>
  <entry>No</entry>
  <entry>Yes</entry>
</row>
<row>
  <entry>nForce 2 IGP</entry>
  <entry>No</entry>
  <entry>No</entry>
</row>
</tbody>
</tgroup>
</informaltable>
</sect3>
</sect1>
</appendix>

<appendix id="techdocs">
<title>Documents for developpers</title>
<sect1 id="xmlstruct">
<title>Monitor database structure</title>
<para>The monitor database is written in XML, it can be found in the db directory of ddccontrol-db package.</para>
<para>This directory contains the following files:
<itemizedlist mark='bullet'>
<listitem>
<para>
options.xml
</para>
</listitem>
<listitem>
<para>
monitor/%monitor_id%.xml
</para>
</listitem>
</itemizedlist>
</para>
<sect2 id="optionsxml">
<title>Control list</title>
<subtitle>XML file: options.xml</subtitle>
<para>Controls (e.g. "brightness"...) are contained in groups
(e.g. "color settings"). Groups and subgroups allow the GUI 
to separate the options in different branches on the tree.</para>

<para>Controls IDs are usually abbreviated Control Names.</para>

<para>Control types:</para>
<itemizedlist mark='bullet'>
<listitem>
<para>
"value": The control accepts values in a continuous range (e.g. brightness)
</para>
</listitem>
<listitem>
<para>
"command": An action occurs when the value is set to something greater than 0 (e.g. degauss).
</para>
<para>If you don't define any value entry in a command control, the default
value 0x01 will be used.</para>
</listitem>
<listitem>
<para>
"list": The control accepts a list of values (e.g. OSD language).
</para>
</listitem>
</itemizedlist>

<para>The "address" parameter in control and "value" in value are optional.</para>

<para>File format:</para>
<screen>
<![CDATA[<?xml version="1.0"?>
<monitor name="%full_monitor_name%" init="[standard|samsung]" caps="%caps%">
  <controls>
    <!--- value -->
    <control id="%control_id%" address="%hex_address%" delay="%wait_time%"/>
    <!--- command using a default 0x01 value-->
    <control id="%control_id%" address="%hex_address%" delay="%wait_time%"/>
    <!--- command -->
    <control id="%control_id%" address="%hex_address%" delay="%wait_time%">
      <value id="activate" value="%hex_value%"/>
    </control>
    <!--- list -->
    <control id="%control_id%" address="%hex_address%" delay="%wait_time%">
      <value id="%value_id%" value="%hex_value%"/>
      <value...>
    </control>
    <control...>
  </controls>
</monitor>
]]></screen>
</sect2>
<sect2 id="monitorxml">
<title>Monitor Profiles</title>
<subtitle>XML files: monitor/%monitor_id%.xml</subtitle>
<para>List of controls supported by a monitor.</para>
<para>Controls IDs are defined in options.xml, if it is a list or a command
with a non-default value, supported values must be defined. "address" 
parameter for controls, and "value", are optional if they are defined 
in the general options file.</para>

<para>The init parameter in monitor define the type of the initialisation:
DDC/CI standard ("standard"), or Samsung ("samsung"). </para>

<para>The caps parameter is optional. It is compatible with ACCESS.bus
specifications and is treated as following: </para>
<itemizedlist mark='bullet'>
<listitem>
<para>
If caps is not defined, caps are read from monitor.
</para>
</listitem>
<listitem>
<para>
If this attribute exists and have a vcp string
(e.g. caps="type(lcd) vcp(10 12)") then specified caps string are used.
</para>
</listitem>
<listitem>
<para> 
If specified caps string does not contain vcp (e.g. caps="type(crt)"
or caps=""), then all controls defined in the monitor profile are 
supposed to be supported.
</para>
</listitem>
</itemizedlist>

<para>
You can set a parameter delay to set the time in milliseconds to wait
after changing the value of this control. If you don't, a default value
is used.</para>

<para>File format:</para>
<screen>
<![CDATA[<?xml version="1.0"?>
<monitor name="%full_monitor_name%" init="[standard|samsung]" caps="%caps%">
  <controls>
    <!--- value -->
    <control id="%control_id%" address="%hex_address%" delay="%wait_time%"/>
    <!--- command using a default 0x01 value-->
    <control id="%control_id%" address="%hex_address%" delay="%wait_time%"/>
    <!--- command -->
    <control id="%control_id%" address="%hex_address%" delay="%wait_time%">
      <value id="activate" value="%hex_value%"/>
    </control>
    <!--- list -->
    <control id="%control_id%" address="%hex_address%" delay="%wait_time%">
      <value id="%value_id%" value="%hex_value%"/>
      <value...>
    </control>
    <control...>
  </controls>
</monitor>
]]></screen>
<para>If a monitor supports exactly the same controls as another one, you can define it as shown:</para>
<screen>
<![CDATA[<?xml version="1.0"?>
<monitor include="%monitor_id%" name="%full_monitor_name%" caps="%caps%"/>
]]></screen>
</sect2>
</sect1>
</appendix>
</book>
